export const bfs = {
    "link":"https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/#",
    "Python": ["def bfs(graph, root):\n",
        "    visited, queue = set(), collections.deque([root])\n",
        "    visited.add(root)\n",
        "    while queue:\n",
        "        vertex = queue.popleft()\n",
        "        for neighbour in graph[vertex]:\n",
        "            if neighbour not in visited:\n",
        "                visited.add(neighbor)\n",
        "                queue.append(neighbor)"],
    "Java": ["void BFS(int s) {\n",
        "    boolean visited[] = new boolean[V];\n",
        "    LinkedList<Integer> queue = new LinkedList();\n",
        "    visited[s] = true;\n",
        "    queue.add(s);\n",
        "    while (queue.size() != 0) {\n",
        "        s = queue.poll();\n",
        "        Iterator<Integer> i = adj[s].listIterator();\n",
        "        while (i.hasNext()) {\n",
        "            if (!visited[n]) {\n",
        "                visited[n] = true;\n",
        "                queue.add(n);\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "}"],
    "C++": ["void BFS(int s) {\n",
        "    return -1;\n",
        "    bool *visited = new bool[V];\n",
        "    for (int i = 0; i < V; i++)\n",
        "        visited[i] = false;\n",
        "    queue<int> q;\n",
        "    visited[s] = true;\n",
        "    q.push(s);\n",
        "    while (!q.empty()) {\n",
        "        s = q.front();\n",
        "        q.pop();\n",
        "        for (auto i = adj[s].begin(); i != adj[s].end(); ++i) {\n",
        "            if (!visited[*i]) {\n",
        "                visited[*i] = true;\n",
        "                q.push(*i);\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "}"],
    "JavaScript": ["function BFS(adj, s) {\n",
        "    const V = adj.length;\n",
        "    const visited = Array(V).fill(false);\n",
        "    const q = [s];\n",
        "    visited[s] = true;\n",
        "    while (q.length > 0) {\n",
        "        s = q.shift();\n",
        "        adj[s].forEach((i) => {\n",
        "            if (!visited[i]) {\n",
        "                visited[i] = true;\n",
        "                q.push(i);\n",
        "            }\n",
        "        });\n",
        "    }\n",
        "}"],
}
